{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#question 1\n",
    "#Object-oriented Programming, or OOP for short, is a programming paradigm which provides a means of structuring programs so that properties and behaviors are bundled into individual objects.\n",
    "\n",
    "#For instance, an object could represent a person with a name property, age, address, etc., with behaviors like walking, talking, breathing, and running. Or an email with properties like recipient list, subject, body, etc., and behaviors like adding attachments and sending. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#question 2\n",
    "#Benefits of OOPS:\n",
    "\n",
    "    #.OOP offers easy to understand and a clear modular structure for programs.\n",
    "    #.Objects created for Object-Oriented Programs can be reused in other programs. Thus it saves significant development cost.\n",
    "    #.Large programs are difficult to write, but if the development and designing team follow OOPS concept then they can better design with minimum flaws.\n",
    "    #.It also enhances program modularity because every object exists independently.\n",
    "    #.It is possible to map objects in the problem domain to those objects in the program. Message passing technique for communication between objects make the interface descriptions with external system much simpler.\n",
    "    #. Software complexity can be easily managed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#question 3\n",
    "\n",
    "#difference between method and function\n",
    "\n",
    "                 method\n",
    "# Method is called by its name but it is associated to an object(dependent)\n",
    "# a method is implicity passed the object on which it is involved\n",
    "# it may or may not return any  data\n",
    "# a method can operate on the data (instance variable)that is contained by the corresponding class\n",
    "                 function\n",
    " #function is block of a code that is also called by its name(independent)\n",
    "# the function can have different parameters or may not have any at all.if any data(parameters) are passed they are passed explicity\n",
    "# it may or may not return any  data\n",
    "# function does not deal with class and its instance concept"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#question 4 \n",
    "#class:\n",
    "    #a class describes the contents of the objects that belong to it: it describes an aggregate of data fields \n",
    "    (called instance variables), and defines the operations (called methods).\n",
    "#object:\n",
    "    #an object is an element (or instance) of a class; objects have the behaviors of their class. The object is the actual component of programs, while the class specifies how instances are created and how they behave.\n",
    "#attribute:\n",
    "    #Attributes can be broadly categorized into two types: Class attributes and Instance attributes. Class attributes are shared by all the objects of a class while instance attributes are the exclusive property of the instance.\n",
    "Remember, an instance is just another name for the object. Instance attributes are declared inside any method while class attributes are declared outside of any method.     "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
